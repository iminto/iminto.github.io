<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 白菜不是菜</title>
    <link>https://iminto.github.io/tags/java/</link>
    <description>Recent content in Java on 白菜不是菜</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 Mar 2021 17:39:00 +0800</lastBuildDate><atom:link href="https://iminto.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keycloak接入自研系统</title>
      <link>https://iminto.github.io/post/keycloak%E6%8E%A5%E5%85%A5%E8%87%AA%E7%A0%94%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 24 Mar 2021 17:39:00 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/keycloak%E6%8E%A5%E5%85%A5%E8%87%AA%E7%A0%94%E7%B3%BB%E7%BB%9F/</guid>
      <description>简介 keycloak是一个非常强大的权限认证系统，我们使用keycloak可以方便的实现SSO的功能。虽然keycloak底层使用的wildfly，但是提供了非常方便的Client Adapters和各</description>
    </item>
    
    <item>
      <title>Ambari里自定义资源模块的实现</title>
      <link>https://iminto.github.io/post/ambari%E9%87%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 13 Oct 2020 09:52:43 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/ambari%E9%87%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>Ambari里主机，集群，用户等等都视为一种资源，对它们的增删改查就是对资源的增删改查。 了解实现Ambari里增加一个资源的流程，就更方便修改Ambari的实现。 1.新建控制器层 ambari的控制器层</description>
    </item>
    
    <item>
      <title>基于restfulAPI实现k8s的监听机制</title>
      <link>https://iminto.github.io/post/%E5%9F%BA%E4%BA%8Erestfulapi%E5%AE%9E%E7%8E%B0k8s%E7%9A%84%E7%9B%91%E5%90%AC%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 11 Aug 2020 10:17:04 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/%E5%9F%BA%E4%BA%8Erestfulapi%E5%AE%9E%E7%8E%B0k8s%E7%9A%84%E7%9B%91%E5%90%AC%E6%9C%BA%E5%88%B6/</guid>
      <description>k8s rest api对rc、svc、ingress、pod、deployment等都提供的watch接口，可以实时的监听应用部署状态。 在此之前简单先说一下http长连接 分块传输编码（Chunked transfer encodi</description>
    </item>
    
    <item>
      <title>一种swagger Ui的替代方案不引入任何源码污染</title>
      <link>https://iminto.github.io/post/%E4%B8%80%E7%A7%8Dswagger-ui%E7%9A%84%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88%E4%B8%8D%E5%BC%95%E5%85%A5%E4%BB%BB%E4%BD%95%E6%BA%90%E7%A0%81%E6%B1%A1%E6%9F%93/</link>
      <pubDate>Tue, 12 May 2020 17:18:49 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/%E4%B8%80%E7%A7%8Dswagger-ui%E7%9A%84%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88%E4%B8%8D%E5%BC%95%E5%85%A5%E4%BB%BB%E4%BD%95%E6%BA%90%E7%A0%81%E6%B1%A1%E6%9F%93/</guid>
      <description>在后端项目中，难免遇到需要写接口文档方便第三方调用的场景，一般业界最常用的方案是使用swagger。Java项目中，一般采用springfox项目，它集成了swagger和swagger-ui，不需要</description>
    </item>
    
    <item>
      <title>K8s部署springboot</title>
      <link>https://iminto.github.io/post/k8s%E9%83%A8%E7%BD%B2springboot/</link>
      <pubDate>Fri, 06 Mar 2020 13:44:14 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/k8s%E9%83%A8%E7%BD%B2springboot/</guid>
      <description>1.安装k8s 安装K8S的步骤略去，使用k3s安装会更快捷方便，方便测试环境。 如果使用k3s会有个坑，k3s默认使用container而不是docker作为容器，会导致运行时出现一些问题，后面会详细分</description>
    </item>
    
    <item>
      <title>HttpURLConnection里setReadTimeout超时无效</title>
      <link>https://iminto.github.io/post/httpurlconnection%E9%87%8Csetreadtimeout%E8%B6%85%E6%97%B6%E6%97%A0%E6%95%88/</link>
      <pubDate>Tue, 18 Feb 2020 21:09:34 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/httpurlconnection%E9%87%8Csetreadtimeout%E8%B6%85%E6%97%B6%E6%97%A0%E6%95%88/</guid>
      <description>今天群里有位360的安全大佬，发了个链接http://93.175.29.89:8008/，说爬这个网址的时候，IO会一直卡在那，一直没有返回响应。 那个网址是他构造的一个特殊请求，输出一个视频流，但是</description>
    </item>
    
    <item>
      <title>hadoop 3.1.2 单机模式安装配置</title>
      <link>https://iminto.github.io/post/hadoop3.1.2%E5%8D%95%E6%9C%BA%E6%A8%A1%E5%BC%8F%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 25 Aug 2019 23:12:21 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/hadoop3.1.2%E5%8D%95%E6%9C%BA%E6%A8%A1%E5%BC%8F%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
      <description>hadoop 3.1.2 单机模式安装配置 现在搞大数据记录一下，方便查阅。 1.安装配置jdk和下载hadoop略。 hadoop 下载地址：http://mirror.bit.edu.cn/apache/hadoop/common/ 使用</description>
    </item>
    
    <item>
      <title>讲清楚CAS的那点事</title>
      <link>https://iminto.github.io/post/%E8%AE%B2%E6%B8%85%E6%A5%9Acas%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/</link>
      <pubDate>Tue, 16 Jul 2019 21:54:09 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/%E8%AE%B2%E6%B8%85%E6%A5%9Acas%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/</guid>
      <description>互联网低潮，老是会看到别人发面试经验，看到很多人谈乐观锁，谈CAS，但是都没有说清楚。忍不住叨叨几句。 那什么是乐观锁呢，比较书面的定义是 “它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不</description>
    </item>
    
    <item>
      <title>Netty实现http服务器keep Alive无效的问题排查</title>
      <link>https://iminto.github.io/post/netty%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8keep-alive%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Sat, 06 Jul 2019 22:11:37 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/netty%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8keep-alive%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</guid>
      <description>netty实现http服务器keep-alive无效的问题排查 今天在用netty实现一个http服务器的时候，发现keep-alive并没有生效，具体表现是在request和response的head</description>
    </item>
    
    <item>
      <title>Filebeat7自定义index的一个坑</title>
      <link>https://iminto.github.io/post/filebeat%E4%BF%AE%E6%94%B9index%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</link>
      <pubDate>Wed, 26 Jun 2019 13:21:52 +0000</pubDate>
      
      <guid>https://iminto.github.io/post/filebeat%E4%BF%AE%E6%94%B9index%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</guid>
      <description>我用的filebeat7来收集日志发给Elastic search，版本是7.1.1，对应的elasticsearch版本和其相同。 默认的，filebeat生成的索引名字是filebeat-7.1.1-</description>
    </item>
    
    <item>
      <title>使用Java自动登录需要动态密码的堡垒机</title>
      <link>https://iminto.github.io/post/auto-login-bastion-with-otop-by-java/</link>
      <pubDate>Fri, 16 Nov 2018 20:45:00 +0000</pubDate>
      
      <guid>https://iminto.github.io/post/auto-login-bastion-with-otop-by-java/</guid>
      <description>公司的生产服务器买了QiZhi Technologie的堡垒机，每次登录都得输入密码+空格+OTOP验证码，都得打开手机APP操作一把，烦不胜烦。 不可忍，想了想，还是借助Java在每次调用时自动生成验证</description>
    </item>
    
    <item>
      <title>使用内嵌undertow开发调试jfinal项目</title>
      <link>https://iminto.github.io/post/%E4%BD%BF%E7%94%A8%E5%86%85%E5%B5%8Cundertow%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95jfinal%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sat, 19 May 2018 23:56:37 +0000</pubDate>
      
      <guid>https://iminto.github.io/post/%E4%BD%BF%E7%94%A8%E5%86%85%E5%B5%8Cundertow%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95jfinal%E9%A1%B9%E7%9B%AE/</guid>
      <description>今天在修一个老项目，使用的是jfinal框架，这个框架算是一个比较传统的框架，只支持打包成war运行放入容器中运行，但是在开发过程中可以使用jetty快速启动和调试。个人不是很喜欢jetty，遂换成了</description>
    </item>
    
    <item>
      <title>Java里常见的几个语法小坑</title>
      <link>https://iminto.github.io/post/java_trap/</link>
      <pubDate>Sat, 05 May 2018 14:18:23 +0000</pubDate>
      
      <guid>https://iminto.github.io/post/java_trap/</guid>
      <description>很久没更新博客了，想到几个小坑，虽然没啥技术含量，但或许有人不知道呢。 1.删除sublist的元素导致原对象元素被删除 看下面这段代码 List&amp;lt;Integer&amp;gt; students=new ArrayList&amp;lt;Integer&amp;gt;(); for (int i = 0; i &amp;lt;5 ; i++) { students.add(i); } List&amp;lt;Integer&amp;gt; subList=new ArrayList&amp;lt;Integer&amp;gt;(); subList=students.subList(0,5); subList.remove(0); subList.remove(1); for (int i = 0; i &amp;lt;5 ; i++) { System.out.println(i+&amp;quot;=&amp;quot;+students.get(i)); } s</description>
    </item>
    
    <item>
      <title>折腾阿里云OSS的API</title>
      <link>https://iminto.github.io/post/aliyun_oss_custom/</link>
      <pubDate>Thu, 25 Jan 2018 23:26:44 +0000</pubDate>
      
      <guid>https://iminto.github.io/post/aliyun_oss_custom/</guid>
      <description>这两天想给博客做个插件,利用阿里云的OSS来存储文件.但阿里的文档和代码都烂的超乎想象,要么代码老旧不堪,要么跟小脚老太一样引入一坨依赖,想必这块是外包团队做的吧,或者阿里非核心业务员的技术水平也就这</description>
    </item>
    
    <item>
      <title>FireJava输出Java服务器端调试日志到控制台</title>
      <link>https://iminto.github.io/post/firejava%E8%BE%93%E5%87%BAjava%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0/</link>
      <pubDate>Wed, 10 Jan 2018 20:21:52 +0000</pubDate>
      
      <guid>https://iminto.github.io/post/firejava%E8%BE%93%E5%87%BAjava%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0/</guid>
      <description>针对最新火狐浏览器50+以上版本的firebug协议，类似FirePHP，但是FirePHP已经很久不更新，并且对最新的浏览器也已失效。 这个在Firebug之上运行的扩展，结合一个服务器端的库，就可以</description>
    </item>
    
    <item>
      <title>TOTP算法Java版本</title>
      <link>https://iminto.github.io/post/totp%E7%AE%97%E6%B3%95java%E7%89%88%E6%9C%AC/</link>
      <pubDate>Mon, 08 Jan 2018 20:21:52 +0000</pubDate>
      
      <guid>https://iminto.github.io/post/totp%E7%AE%97%E6%B3%95java%E7%89%88%E6%9C%AC/</guid>
      <description>TOTP 概念 TOTP - Time-based One-time Password Algorithm is an extension of the HMAC-based One Time Password algorithm HOTP to support a time based moving factor. TOTP（基于时间的一次性密码算法）是支持时间作为动态因素基于HMAC一次性密码算法的扩展。它是OTP算法的一种 算法如下: TOTP = Truncate(HMAC-SHA-1(K, (T - T0) / X)) K 共享密</description>
    </item>
    
  </channel>
</rss>
