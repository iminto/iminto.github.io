<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 白菜不是菜</title>
    <link>https://iminto.github.io/tags/linux/</link>
    <description>Recent content in Linux on 白菜不是菜</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 09 Jul 2021 13:52:40 +0800</lastBuildDate><atom:link href="https://iminto.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>进程Socket描述符的那些事</title>
      <link>https://iminto.github.io/post/socket%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Fri, 09 Jul 2021 13:52:40 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/socket%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>前几天看到有人发的一个面试题，问的是MySQL连接的进程描述符的问题。 在Linux里，一切皆文件，那进程描述符，实际就是文件描述符了。 我们还知道Linux 内核提供了一种通过 proc文件系统，/proc</description>
    </item>
    
    <item>
      <title>谁杀死了这个进程</title>
      <link>https://iminto.github.io/post/%E8%B0%81%E6%9D%80%E6%AD%BB%E4%BA%86%E8%BF%99%E4%B8%AA%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Tue, 15 Jun 2021 16:35:59 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/%E8%B0%81%E6%9D%80%E6%AD%BB%E4%BA%86%E8%BF%99%E4%B8%AA%E8%BF%9B%E7%A8%8B/</guid>
      <description>之前文章提到服务器上一个进程启动后不到三分钟就挂掉，到底是什么原因挂掉了，这个问题可以写篇文章了。进程死了，无非就两种可能：自杀，他杀。他杀又包括第三方杀害和系统判死刑。 先来看自杀。 1.自杀 我们以Ja</description>
    </item>
    
    <item>
      <title>Linux恶意ELF文件分析</title>
      <link>https://iminto.github.io/post/linux%E6%81%B6%E6%84%8Felf%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 17 May 2021 09:31:11 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/linux%E6%81%B6%E6%84%8Felf%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</guid>
      <description>起因是某客户的服务器上，只要一启动server，过不了几秒就被kill，然后错误日志也看不出啥。 server是基于jvm的，怎么看一个进程被哪个进程杀死，这个可以写一篇文章了。 自信一点，这肯定不是我们</description>
    </item>
    
    <item>
      <title>Centos配置GoogleAuthenticator动态密钥进行ssh二次验证</title>
      <link>https://iminto.github.io/post/centos%E9%85%8D%E7%BD%AEgoogleauthenticator%E5%8A%A8%E6%80%81%E5%AF%86%E9%92%A5%E8%BF%9B%E8%A1%8Cssh%E4%BA%8C%E6%AC%A1%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Tue, 29 Dec 2020 16:44:44 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/centos%E9%85%8D%E7%BD%AEgoogleauthenticator%E5%8A%A8%E6%80%81%E5%AF%86%E9%92%A5%E8%BF%9B%E8%A1%8Cssh%E4%BA%8C%E6%AC%A1%E9%AA%8C%E8%AF%81/</guid>
      <description>安装依赖 yum list | grep google-authenticator yum install google-authenticator yum install qrencode 配置Google Authenticator 安装完直接跑下面的命令进行配置，注意只在当前用户生效 &amp;gt; google-authenticator 之后会需要确认几点信息 Do you want authentication tokens to be time-based (y/n) y 是否配置基于时间的动态密钥，选择y，之后会出现超级大一</description>
    </item>
    
    <item>
      <title>Prosody搭建xmpp服务器</title>
      <link>https://iminto.github.io/post/prosody%E6%90%AD%E5%BB%BAxmpp%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Wed, 26 Aug 2020 10:22:59 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/prosody%E6%90%AD%E5%BB%BAxmpp%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>按惯例上Prosody 自己的文档: https://prosody.im/doc/ 安装 使用centos8安装 yum install prosody dnf --enablerepo=PowerTools install lua-filesystem 其它版本linux则无需单独安装lua-filesystem依赖。 配置 主配置文件 prosody.cfg.lua 一般不需要修改。 下面写些咱做的修改😂 在 modules_enabled 中</description>
    </item>
    
    <item>
      <title>Kde桌面下自带应用无法输入中文</title>
      <link>https://iminto.github.io/post/kde%E6%A1%8C%E9%9D%A2%E4%B8%8B%E9%83%A8%E5%88%86%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</link>
      <pubDate>Sat, 07 Mar 2020 21:07:54 +0800</pubDate>
      
      <guid>https://iminto.github.io/post/kde%E6%A1%8C%E9%9D%A2%E4%B8%8B%E9%83%A8%E5%88%86%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</guid>
      <description>​ 这个问题纠结我快一年了。某次manjaro升级后，我的manjaro在系统自带应用上如konsole,kate,Yakuake上都不能切换输入法（目测系统自带的软件都不能），鼠标放键盘图标上提示“无</description>
    </item>
    
    <item>
      <title>使用Java自动登录需要动态密码的堡垒机</title>
      <link>https://iminto.github.io/post/auto-login-bastion-with-otop-by-java/</link>
      <pubDate>Fri, 16 Nov 2018 20:45:00 +0000</pubDate>
      
      <guid>https://iminto.github.io/post/auto-login-bastion-with-otop-by-java/</guid>
      <description>公司的生产服务器买了QiZhi Technologie的堡垒机，每次登录都得输入密码+空格+OTOP验证码，都得打开手机APP操作一把，烦不胜烦。 不可忍，想了想，还是借助Java在每次调用时自动生成验证</description>
    </item>
    
    <item>
      <title>Linux 下获取文件创建时间</title>
      <link>https://iminto.github.io/post/get-createtime-in-linux/</link>
      <pubDate>Sun, 07 Oct 2018 13:23:59 +0000</pubDate>
      
      <guid>https://iminto.github.io/post/get-createtime-in-linux/</guid>
      <description>在Linux里，用户层面并没有文件创建时间的概念，无论是用ls还是stat 指令，都无法获取到文件的创建时间 [tudou@tudou-pc statx]$ stat test-statx.c 文件：test-statx.c 大小：6656 块：16 IO 块：4096 普通文件 设备：805</description>
    </item>
    
    <item>
      <title>linux下解压bin文件</title>
      <link>https://iminto.github.io/post/linux%E4%B8%8B%E8%A7%A3%E5%8E%8Bbin%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 02 Jun 2018 13:08:41 +0000</pubDate>
      
      <guid>https://iminto.github.io/post/linux%E4%B8%8B%E8%A7%A3%E5%8E%8Bbin%E6%96%87%E4%BB%B6/</guid>
      <description>现在的一些Linux软件很流行使用bin这种安装包格式，只需要下载个安装包就能自动安装解压，比tar.gz省事，比.deb，.rpm的安装包兼容性强，适应范围广。但也有一个问题，bin安装包让人无法知</description>
    </item>
    
  </channel>
</rss>
