<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 白菜不是菜</title>
    <link>https://iminto.github.io/tags/linux/</link>
    <description>Recent content in Linux on 白菜不是菜</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 16 Jun 2023 10:37:46 +0800</lastBuildDate>
    <atom:link href="https://iminto.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>文件生成动态二维码</title>
      <link>https://iminto.github.io/post/%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E4%BA%8C%E7%BB%B4%E7%A0%81/</link>
      <pubDate>Fri, 16 Jun 2023 10:37:46 +0800</pubDate>
      <guid>https://iminto.github.io/post/%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E4%BA%8C%E7%BB%B4%E7%A0%81/</guid>
      <description>&lt;p&gt;将图片/文件转为二维码动画&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install qrencode &#xD;&#xA;test=&amp;quot;$(cat dianlong.jpg| base64|tr &#39;\n&#39; &#39; &#39;|sed &#39;s/[[:space:]]//g&#39;)&amp;quot;&#xD;&#xA;echo $test &amp;gt;&amp;gt; base64.txt #文件转base64&#xD;&#xA;split -b 1k base64.txt 1_ #按1K分割&#xD;&#xA;for x in $(find -type f  -name &amp;quot;1_*&amp;quot;); do cat $x|qrencode -o $x.png -s 4 ;done&#xD;&#xA;ffmpeg -framerate 6  -pattern_type glob -i &#39;1_*.png&#39;  -loop 0 out1.gif #转GIF&#xD;&#xA;ffmpeg -framerate 10  -pattern_type glob -i &#39;1_*.png&#39;  -c:v libx264 -pix_fmt yuv420p out.mp4&#xD;&#xA;#计算帧数，验证&#xD;&#xA;ffprobe -i out.mp4&#xD;&#xA;ffmpeg -i out.mp4  -map 0:v:0 -c copy -f null -&#xD;&#xA;ffprobe -v error -select_streams v:0 -show_entries stream=nb_frames -of default=nokey=1:noprint_wrappers=1 out.mp4&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;还原：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cpuid和序列号背后的那些故事</title>
      <link>https://iminto.github.io/post/cpuid%E5%92%8C%E5%BA%8F%E5%88%97%E5%8F%B7%E8%83%8C%E5%90%8E%E7%9A%84%E9%82%A3%E4%BA%9B%E6%95%85%E4%BA%8B/</link>
      <pubDate>Wed, 09 Feb 2022 14:16:58 +0800</pubDate>
      <guid>https://iminto.github.io/post/cpuid%E5%92%8C%E5%BA%8F%E5%88%97%E5%8F%B7%E8%83%8C%E5%90%8E%E7%9A%84%E9%82%A3%E4%BA%9B%E6%95%85%E4%BA%8B/</guid>
      <description>&lt;p&gt;最近测试反馈了一个问题，每次重启服务器，我们某个版本的业务系统中的机器码都会改变，导致根据机器码算出来的许可证失效，从而使软件无法使用。&#xA;这个问题反馈了有一段时间了，但是本地一直没复现。然后前几天测试说又复现了，马上去看了下测试环境，服务器是一台国产化FT S2500服务器,验证了下，果然如此，马上去看了下关键代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程Socket描述符的那些事</title>
      <link>https://iminto.github.io/post/socket%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Fri, 09 Jul 2021 13:52:40 +0800</pubDate>
      <guid>https://iminto.github.io/post/socket%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>&lt;p&gt;前几天看到有人发的一个面试题，问的是MySQL连接的进程描述符的问题。&lt;/p&gt;&#xA;&lt;p&gt;在Linux里，一切皆文件，那进程描述符，实际就是文件描述符了。&lt;/p&gt;&#xA;&lt;p&gt;我们还知道Linux 内核提供了一种通过 proc文件系统，/proc 文件系统是一个虚拟文件系统，通过它可以使用一种新的方法在 Linux内核空间和用户间之间进行通信。在 /proc文件系统中，我们可以将对虚拟文件的读写作为与内核中实体进行通信的一种手段，但是与普通文件不同的是，这些虚拟文件的内容都是动态创建的。用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>谁杀死了这个进程</title>
      <link>https://iminto.github.io/post/%E8%B0%81%E6%9D%80%E6%AD%BB%E4%BA%86%E8%BF%99%E4%B8%AA%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Tue, 15 Jun 2021 16:35:59 +0800</pubDate>
      <guid>https://iminto.github.io/post/%E8%B0%81%E6%9D%80%E6%AD%BB%E4%BA%86%E8%BF%99%E4%B8%AA%E8%BF%9B%E7%A8%8B/</guid>
      <description>&lt;p&gt;之前文章提到服务器上一个进程启动后不到三分钟就挂掉，到底是什么原因挂掉了，这个问题可以写篇文章了。进程死了，无非就两种可能：自杀，他杀。他杀又包括第三方杀害和系统判死刑。&lt;/p&gt;&#xA;&lt;p&gt;先来看自杀。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1自杀&#34;&gt;1.自杀&lt;/h2&gt;&#xA;&lt;p&gt;我们以Java为例，Java程序在main方法运行完就会退出，这种属于自杀。或者像下面这样&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux恶意ELF文件分析</title>
      <link>https://iminto.github.io/post/linux%E6%81%B6%E6%84%8Felf%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 17 May 2021 09:31:11 +0800</pubDate>
      <guid>https://iminto.github.io/post/linux%E6%81%B6%E6%84%8Felf%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;起因是某客户的服务器上，只要一启动server，过不了几秒就被kill，然后错误日志也看不出啥。&#xA;server是基于jvm的，怎么看一个进程被哪个进程杀死，这个可以写一篇文章了。&lt;/p&gt;&#xA;&lt;p&gt;自信一点，这肯定不是我们代码的问题导致JVM崩溃啊，毫无疑问是那些做安全的脚本小子搞的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Centos配置GoogleAuthenticator动态密钥进行ssh二次验证</title>
      <link>https://iminto.github.io/post/centos%E9%85%8D%E7%BD%AEgoogleauthenticator%E5%8A%A8%E6%80%81%E5%AF%86%E9%92%A5%E8%BF%9B%E8%A1%8Cssh%E4%BA%8C%E6%AC%A1%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Tue, 29 Dec 2020 16:44:44 +0800</pubDate>
      <guid>https://iminto.github.io/post/centos%E9%85%8D%E7%BD%AEgoogleauthenticator%E5%8A%A8%E6%80%81%E5%AF%86%E9%92%A5%E8%BF%9B%E8%A1%8Cssh%E4%BA%8C%E6%AC%A1%E9%AA%8C%E8%AF%81/</guid>
      <description>&lt;h3 id=&#34;安装依赖&#34;&gt;安装依赖&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum list | grep google-authenticator&#xD;&#xA;yum install google-authenticator&#xD;&#xA;yum install qrencode&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;配置google-authenticator&#34;&gt;配置Google Authenticator&lt;/h3&gt;&#xA;&lt;p&gt;安装完直接跑下面的命令进行配置，注意只在当前用户生效&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; google-authenticator&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;之后会需要确认几点信息&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Do you want authentication tokens to be time-based (y/n) y&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;是否配置基于时间的动态密钥，选择y，之后会出现超级大一个二维码，下面还会有一些小字,这里的key就是用于配置手机端app的，我们先保存下来，不用慌，因为这个key随时都可以查得到.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prosody搭建xmpp服务器</title>
      <link>https://iminto.github.io/post/prosody%E6%90%AD%E5%BB%BAxmpp%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Wed, 26 Aug 2020 10:22:59 +0800</pubDate>
      <guid>https://iminto.github.io/post/prosody%E6%90%AD%E5%BB%BAxmpp%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>&lt;p&gt;按惯例上Prosody 自己的文档: &lt;a href=&#34;https://prosody.im/doc/&#34;&gt;https://prosody.im/doc/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;&#xA;&lt;p&gt;使用centos8安装&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install prosody&#xD;&#xA;dnf --enablerepo=PowerTools install lua-filesystem&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其它版本linux则无需单独安装lua-filesystem依赖。&lt;/p&gt;&#xA;&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;&#xA;&lt;p&gt;主配置文件 prosody.cfg.lua 一般不需要修改。&lt;/p&gt;&#xA;&lt;p&gt;下面写些咱做的修改😂&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在 modules_enabled 中取消启用 version 和 uptime 模块，顺便启动些其他的模块，比如offline。&lt;/li&gt;&#xA;&lt;li&gt;如果需要允许在客户端上注册的话，把 allow_registration 设置成 true 。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;其它配置保持默认即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kde桌面下自带应用无法输入中文</title>
      <link>https://iminto.github.io/post/kde%E6%A1%8C%E9%9D%A2%E4%B8%8B%E9%83%A8%E5%88%86%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</link>
      <pubDate>Sat, 07 Mar 2020 21:07:54 +0800</pubDate>
      <guid>https://iminto.github.io/post/kde%E6%A1%8C%E9%9D%A2%E4%B8%8B%E9%83%A8%E5%88%86%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</guid>
      <description>&lt;p&gt;​      这个问题纠结我快一年了。某次manjaro升级后，我的manjaro在系统自带应用上如konsole,kate,Yakuake上都不能切换输入法（目测系统自带的软件都不能），鼠标放键盘图标上提示“无输入窗口”。但是浏览器和其他软件是可以的。这个问题不是太影响使用，就忍了很久，大不了其他地方写好了再复制到kate里，但是就好像衣服上落沾了一坨黄泥，始终感觉不爽，每隔一两个月就要尝试解决一次，始终无果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Java自动登录需要动态密码的堡垒机</title>
      <link>https://iminto.github.io/post/auto-login-bastion-with-otop-by-java/</link>
      <pubDate>Fri, 16 Nov 2018 20:45:00 +0000</pubDate>
      <guid>https://iminto.github.io/post/auto-login-bastion-with-otop-by-java/</guid>
      <description>&lt;p&gt;公司的生产服务器买了QiZhi Technologie的堡垒机，每次登录都得输入密码+空格+OTOP验证码，都得打开手机APP操作一把，烦不胜烦。&lt;/p&gt;&#xA;&lt;p&gt;不可忍，想了想，还是借助Java在每次调用时自动生成验证码，然后搞个ssh自动登录（别问我问啥不用公钥，哪有权限啊）得了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 下获取文件创建时间</title>
      <link>https://iminto.github.io/post/get-createtime-in-linux/</link>
      <pubDate>Sun, 07 Oct 2018 13:23:59 +0000</pubDate>
      <guid>https://iminto.github.io/post/get-createtime-in-linux/</guid>
      <description>&lt;p&gt;在Linux里，用户层面并没有文件创建时间的概念，无论是用ls还是stat 指令，都无法获取到文件的创建时间&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[tudou@tudou-pc statx]$ stat test-statx.c&#xD;&#xA;  文件：test-statx.c&#xD;&#xA;  大小：6656            块：16         IO 块：4096   普通文件&#xD;&#xA;设备：805h/2053d        Inode：6684737     硬链接：1&#xD;&#xA;权限：(0644/-rw-r--r--)  Uid：( 1000/   tudou)   Gid：( 1001/   tudou)&#xD;&#xA;最近访问：2018-10-07 13:16:29.000000000 +0800&#xD;&#xA;最近更改：2018-10-07 13:21:09.855461986 +0800&#xD;&#xA;最近改动：2018-10-07 13:21:09.855461986 +0800&#xD;&#xA;创建时间：-&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;可以看到「创建时间」一行总是「-」。&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux下解压bin文件</title>
      <link>https://iminto.github.io/post/linux%E4%B8%8B%E8%A7%A3%E5%8E%8Bbin%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 02 Jun 2018 13:08:41 +0000</pubDate>
      <guid>https://iminto.github.io/post/linux%E4%B8%8B%E8%A7%A3%E5%8E%8Bbin%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;现在的一些Linux软件很流行使用bin这种安装包格式，只需要下载个安装包就能自动安装解压，比tar.gz省事，比.deb，.rpm的安装包兼容性强，适应范围广。但也有一个问题，bin安装包让人无法知道里面的细节，还是有所顾虑的。比如我前几天需要下载一个JRE6，但Oracle官方在JDK7之前都没有tar.gz包，只有bin包。我肯定不能直接安装bin文件啊，这会破坏我本机已有的JDK8开发环境。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
